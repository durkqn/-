import pygame
import random
import time
import math

pygame.init()
SCREEN_WIDTH = 1800
SCREEN_HEIGHT = 1300
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
clock = pygame.time.Clock()

BLACK = (0, 0, 0)#검정색
RED = (255, 0, 0)#빨강색
YELLOW = (255, 255, 0)#노랑색
large_font = pygame.font.SysFont('malgungothic', 72)
small_font = pygame.font.SysFont('malgungothic', 36)
score = 0
start_time = int(time.time())
remain_second = 90
game_over = False
game_paused = False

#벌레 이미지
bug_image = pygame.image.load('bug.png')
squish_image = pygame.image.load('bug.png')
bugs = []
for i in range(30):
    bug = bug_image.get_rect(left=random.randint(0, SCREEN_WIDTH) - bug_image.get_width(), top=random.randint(0, SCREEN_HEIGHT) - bug_image.get_height())
    degree = random.randint(0, 360)
    bugs.append((bug, degree))

#웃음 소리
pygame.mixer.music.load('teemo.mp3')
pygame.mixer.music.play(-1)
squish_sound = pygame.mixer.Sound('teemo.mp3')
game_over_sound = pygame.mixer.Sound('teemo.mp3')

squish_effects = []

#게임을 처음부터 다시 시작
def reset_game():
    global score, start_time, remain_second, game_over, game_paused, bugs
    score = 0
    start_time = int(time.time())
    remain_second = 90
    game_over = False
    game_paused = False
    pygame.mixer.music.play(-1)
    
#벌레가 임의의 위치에서 나타나고 다양한 방법으로 움직임
    bugs = []
    for i in range(30):
        bug = bug_image.get_rect(left=random.randint(0, SCREEN_WIDTH) - bug_image.get_width(), top=random.randint(0, SCREEN_HEIGHT) - bug_image.get_height())
        degree = random.randint(0, 360)
        bugs.append((bug, degree))

#게임 종료, 일시정지, 벌레 클릭 시 벌레 제거 및 재생성, 점수 증가, 소리 재생, 효과 표시 등의 기능 수행
while True:
    screen.fill(BLACK)
    event = pygame.event.poll()
    if event.type == pygame.QUIT:
        break
    elif event.type == pygame.KEYDOWN:
        if event.key == pygame.K_SPACE:
            game_paused = not game_paused
    elif event.type == pygame.MOUSEBUTTONDOWN and not game_over and not game_paused:
        for bug, degree in bugs:
            if bug.collidepoint(event.pos):
                bugs.remove((bug, degree))
                bug = bug_image.get_rect(left=random.randint(0, SCREEN_WIDTH) - bug_image.get_width(), top=random.randint(0, SCREEN_HEIGHT) - bug_image.get_height())
                degree = random.randint(0, 360)
                bugs.append((bug, degree))
                score += 1
                squish_sound.play()
                squish_effects.append((event.pos, int(time.time())))

    if not game_over and not game_paused:#시간 제한
        current_time = int(time.time())
        remain_second = 90 - (current_time - start_time)

        if remain_second <= 0:#게임이 종료되었음을 알림
            game_over = True
            pygame.mixer.music.stop()
            game_over_sound.play()

        for bug, degree in bugs:#게임 화면에서 벌레들이 다양한 방향으로 움직이는 동작을 구현
            radian = degree * (math.pi / 180)
            dx = 7 * math.cos(radian)
            dy = -7 * math.sin(radian)
            bug.left += dx
            bug.top += dy

        for bug, degree in bugs:#벌레들이 화면 안에서 계속 움직이고, 화면 밖으로 나간 벌레들이 다시 나옴
            if not bug.colliderect(screen.get_rect()):
                bugs.remove((bug, degree))
                bug = bug_image.get_rect(left=random.randint(0, SCREEN_WIDTH) - bug_image.get_width(), top=random.randint(0, SCREEN_HEIGHT) - bug_image.get_height())
                degree = random.randint(0, 360)
                bugs.append((bug, degree))

    for bug, degree in bugs:#벌레 이미지가 회전되므로 화면에 표시되는 각 벌레는 다른 각도와 방향을 가짐
        rotated_bug_image = pygame.transform.rotate(bug_image, degree)
        screen.blit(rotated_bug_image, (bug.left, bug.top))

    for pos, effect_time in squish_effects:#게임에 다양한 효과를 추가하여 게임 플레이어의 경험 향상
        if int(time.time()) - effect_time < 1:
            screen.blit(squish_image, (pos[0] - squish_image.get_width() // 2, pos[1] - squish_image.get_height() // 2))
        else:
            squish_effects.remove((pos, effect_time))

    score_image = small_font.render('점수 {}'.format(score), True, YELLOW)#게임 화면의 좌상단에 현재 점수를 표시함
    screen.blit(score_image, (10, 10))

    remain_second_image = small_font.render('남은 시간 {}'.format(remain_second), True, YELLOW)#게임 화면의 오른쪽 상단에 남은 시간을 표시함
    screen.blit(remain_second_image, remain_second_image.get_rect(right=SCREEN_WIDTH - 10, top=10))

    if game_over:
        game_over_image = large_font.render('게임 종료', True, RED)#게임이 종료되면 화면 중앙에 "게임 종료" 메시지를 표시함
        screen.blit(game_over_image, game_over_image.get_rect(centerx=SCREEN_WIDTH // 2, centery=SCREEN_HEIGHT // 2))

        restart_image = small_font.render('R 키를 눌러 다시 시작', True, YELLOW)#게임이 종료된 후에 화면 중앙 하단에 "R 키를 눌러 다시 시작" 메시지를 표시함
        screen.blit(restart_image, restart_image.get_rect(centerx=SCREEN_WIDTH // 2, centery=SCREEN_HEIGHT // 2 + 100))

    elif game_paused:#게임이 일시정지된 상태일 때 화면 중앙에 "게임 일시정지" 메시지를 표시함
        pause_image = large_font.render('게임 일시정지', True, RED)
        screen.blit(pause_image, pause_image.get_rect(centerx=SCREEN_WIDTH // 2, centery=SCREEN_HEIGHT // 2))

    if game_over and event.type == pygame.KEYDOWN and event.key == pygame.K_r:#게임이 종료된 상태에서 R 키를 누르면 게임을 재시작
        reset_game()

    pygame.display.update()
    clock.tick(30)

pygame.quit()